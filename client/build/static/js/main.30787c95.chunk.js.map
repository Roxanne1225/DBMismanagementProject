{"version":3,"sources":["containers/ExploreContainer.js","api/ArticleClient.js","components/articles/ArticleFilterForm.js","containers/ArticlesContainer.js","containers/ResearchersContainer.js","App.js","serviceWorker.js","index.js"],"names":["ExploreContainer","Container","className","document","axios","ArticleFilterForm","field","onSubmit","useState","articleQuery","setArticleQuery","Card","Body","Form","Group","controlId","Label","Control","type","onChange","e","target","value","Button","onClick","preventDefault","variant","ArticlesContainer","query","articleName","title","console","log","fetch","res","data","fetchArticleByArticleTitle","then","ResearchersContainer","researcherId","useParams","App","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sPAUeA,EANU,kBACvB,kBAACC,EAAA,EAAD,CAAWC,UAAU,QACnB,6C,2CCFJC,SAASC,MAAQA,I,4CCyCFC,EAvCW,SAAC,GAAkB,IAGlBC,EAHEC,EAAe,EAAfA,SAAe,EACFC,mBAAS,IADP,mBACnCC,EADmC,KACrBC,EADqB,KAe1C,OACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpB,kBAACF,EAAA,EAAKG,MAAN,sBACA,kBAACH,EAAA,EAAKI,QAAN,CACEC,KAAK,OACLC,UApBab,EAoBc,QApBL,SAAAc,GAChCV,EAAgB,eACXD,EADU,eAEZH,EAAQc,EAAEC,OAAOC,cAoBd,kBAACC,EAAA,EAAD,CACEC,QAjBW,SAACJ,GACpBA,EAAEK,iBACFlB,EAASE,IAgBDiB,QAAQ,UACRR,KAAK,UAHP,aCAKS,EAtBW,WAYxB,OACE,kBAAC1B,EAAA,EAAD,CAAWC,UAAU,QACnB,kBAAC,EAAD,CAAmBK,SARF,SAACqB,GACpB,IAAMC,EAAcD,EAAME,MAC1BC,QAAQC,IAAIH,GFLT,SAAoCA,GACzC,OAAOI,MAAM,+BAAD,OAAgCJ,IAAe,SAAAK,GAEzD,OADAH,QAAQC,IAAIE,EAAIC,MACTD,EAAIC,QEGXC,CAA2BP,GAAaQ,MAAK,SAAAH,GAAG,OAAIH,QAAQC,IAAIE,WCLrDI,EATc,WAAO,IAC1BC,EAAiBC,cAAjBD,aACR,OACE,kBAACtC,EAAA,EAAD,CAAWC,UAAU,QACnB,gDAAsBqC,GAAgB,2B,MCQ7B,SAASE,IACtB,OACE,kBAAC,IAAD,KACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOjB,QAAQ,OAAOkB,OAAO,MACtC,kBAACF,EAAA,EAAOG,MAAR,CAAcC,GAAIC,IAAMC,GAAG,KAA3B,eACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,qBAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKnD,UAAU,WACb,kBAACmD,EAAA,EAAIN,KAAL,CAAUD,GAAIC,IAAMC,GAAG,YAAvB,WACA,kBAACK,EAAA,EAAIN,KAAL,CAAUD,GAAIC,IAAMC,GAAG,aAAvB,YACA,kBAACK,EAAA,EAAIN,KAAL,CAAUD,GAAIC,IAAMC,GAAG,gBAAvB,kBAON,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,KAAK,aAAaC,UAAW5B,IACpC,kBAAC,IAAD,CAAO2B,KAAK,8BAA8BC,UAAWjB,IACrD,kBAAC,IAAD,CAAOgB,KAAK,IAAIC,UAAWvD,OC1BjBwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACtB,EAAD,OAEFtC,SAAS6D,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.30787c95.chunk.js","sourcesContent":["import React from 'react'\n\nimport Container from 'react-bootstrap/Container'\n\nconst ExploreContainer = () => (\n  <Container className='pt-5'>\n    <p>Explore Page</p>\n  </Container>\n)\n\nexport default ExploreContainer","import axios from 'axios'\n\nimport { articleFixture } from '../fixtures/articles'\n\ndocument.axios = axios\n\nexport function fetchArticleById(articleId) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => resolve(articleFixture), 1000)\n\n  })\n}\n\nexport function fetchArticleByArticleTitle(articleName) {\n  return fetch(`/api/articles/byArticleName/${articleName}`, res => {\n    console.log(res.data)\n    return res.data\n  })\n}","import React, { useState } from 'react'\n\nimport Button from 'react-bootstrap/Button'\nimport Card from 'react-bootstrap/Card'\nimport Form from 'react-bootstrap/Form'\n\nconst ArticleFilterForm = ({ onSubmit }) => {\n  const [articleQuery, setArticleQuery] = useState({})\n\n  const makeHandleChange = field => e => {\n    setArticleQuery({\n      ...articleQuery,\n      [field]: e.target.value\n    })\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    onSubmit(articleQuery)\n  }\n\n  return (\n    <Card>\n      <Card.Body>\n        <Form>\n          <Form.Group controlId=\"formBasicEmail\">\n            <Form.Label>Article Title</Form.Label>\n            <Form.Control\n              type=\"text\"\n              onChange={makeHandleChange('title')}\n            />\n          </Form.Group>\n          <Button\n            onClick={handleSubmit}\n            variant=\"primary\"\n            type=\"submit\"\n          >\n            Seach\n          </Button>\n        </Form>\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default ArticleFilterForm","import React from 'react'\nimport { useParams } from \"react-router-dom\";\n\nimport Container from 'react-bootstrap/Container'\n\nimport { useFetch } from '../hooks/useFetch'\nimport { fetchArticleByArticleTitle } from '../api/ArticleClient'\n\nimport ArticleFilterForm from '../components/articles/ArticleFilterForm'\n\nconst ArticlesContainer = () => {\n  // const { articleId } = useParams()\n\n  // const { isReceived, data: article } =\n  //   useFetch(fetchArticleById, articleId)\n\n  const handleSubmit = (query) => {\n    const articleName = query.title\n    console.log(articleName)\n    fetchArticleByArticleTitle(articleName).then(res => console.log(res))\n  }\n\n  return (\n    <Container className='pt-5'>\n      <ArticleFilterForm onSubmit={handleSubmit} />\n    </Container>\n  )\n}\n\n{/* <p>Articles Page: {articleId || 'no articleId given'}</p>\n{articleId && isReceived && JSON.stringify(article)} */}\n\nexport default ArticlesContainer","import React from 'react'\nimport { useParams } from \"react-router-dom\";\n\nimport Container from 'react-bootstrap/Container'\n\nconst ResearchersContainer = () => {\n  const { researcherId } = useParams()\n  return (\n    <Container className='pt-5'>\n      <p>Researchers Page: {researcherId || 'no researcherId given'}</p>\n    </Container>\n  )\n}\n\nexport default ResearchersContainer","import React from 'react';\nimport {\n  Link,\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\n\nimport ExploreContainer from './containers/ExploreContainer'\nimport ArticlesContainer from './containers/ArticlesContainer'\nimport ResearchersContainer from './containers/ResearchersContainer'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Navbar bg=\"dark\" variant='dark' expand=\"lg\">\n          <Navbar.Brand as={Link} to='/'>Graphademic</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link as={Link} to='/explore'>Explore</Nav.Link>\n              <Nav.Link as={Link} to='/articles'>Articles</Nav.Link>\n              <Nav.Link as={Link} to='/researchers'>Researchers</Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/articles/\" component={ArticlesContainer} />\n          <Route path=\"/researchers/:researcherId?\" component={ResearchersContainer} />\n          <Route path=\"/\" component={ExploreContainer} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}